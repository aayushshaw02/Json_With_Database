type: edu
files:
  - name: src/client/Main.java
    visible: true
    text: |
      package client;
      
      import com.google.gson.Gson;
      import java.io.*;
      import java.net.*;
      import java.nio.file.Files;
      import java.nio.file.Paths;
      
      import com.beust.jcommander.JCommander;
      import com.beust.jcommander.Parameter;
      
      public class Main {
          private static final String address="127.0.0.1";
          private static final int port=23456;
          public static String readFileAsString(String fileName) throws IOException {
              return new String(Files.readAllBytes(Paths.get(fileName)));
          }
          @Parameter(names = {"-t", "--type"}, description = "Type of request (set, get, delete, exit)")
          private String type;
      
          @Parameter(names = {"-k", "--key"}, description = "Key")
          private String key;
      
          @Parameter(names = {"-v", "--value"}, description = "Value to save in database.")
          private String value;
      
          @Parameter(names = {"-in", "--fileName"}, description = "File containing request")
          private String fileName;
          public static void main(String[] args) throws IOException {
              Main main=new Main();
              JCommander.newBuilder()
                      .addObject(main)
                      .build()
                      .parse(args);
              Request request=new Request();
              request.setType(main.type);
              request.setKey(main.key);
              request.setValue(main.value);
              if(main.fileName!=null) {
                  String path="JSON Database with Java/task/src/client/data/"+main.fileName;
                  String req=readFileAsString(path);
                  request=new Gson().fromJson(req, Request.class);
              }
              try (Socket socket = new Socket(InetAddress.getByName(address), port);
                       DataInputStream input = new DataInputStream(socket.getInputStream());
                       DataOutputStream output = new DataOutputStream(socket.getOutputStream()))
              {
                      System.out.println("Client started!");
                      String jsonInput = new Gson().toJson(request);
                      output.writeUTF(jsonInput);
                      System.out.print("Sent: ");
                      System.out.println(jsonInput);
                      String jsonOutput = input.readUTF();
                      System.out.println(jsonOutput.length());
                      System.out.print("Received: ");
                      System.out.println(jsonOutput);
              }catch (Exception e) {
      
              }
          }
      }
    learner_created: false
  - name: src/server/Main.java
    visible: true
    text: |
      package server;
      
      
      import client.Request;
      import com.google.gson.Gson;
      import com.google.gson.GsonBuilder;
      
      import java.io.DataInputStream;
      import java.io.DataOutputStream;
      import java.io.IOException;
      import java.net.InetAddress;
      import java.net.ServerSocket;
      import java.net.Socket;
      import java.util.concurrent.ExecutorService;
      import java.util.concurrent.Executors;
      import java.util.concurrent.locks.Lock;
      import java.util.concurrent.locks.ReadWriteLock;
      import java.util.concurrent.locks.ReentrantReadWriteLock;
      
      
      public class Main {
      
          public static ReadWriteLock lock=new ReentrantReadWriteLock();
      
          public static Lock readLock=lock.readLock();
      
          public static Lock writeLock=lock.writeLock();
          private static final String address = "127.0.0.1";
          private static final int port = 23456;
          public static Response handleRequest(Request r,ServerSocket server) throws IOException {
              String responseType = null;
              Response response;
              switch(r.getType()){
                  case "get": try {
                                   readLock.lock();
                                   responseType = Database.get(r.getKey());
                                   if (responseType.equals("ERROR")) {
                                   response = new ErrorResponse("ERROR", "No such key");
                                   } else {
                                    response = new OkResponse("OK", Database.get(r.getKey()));
                                   }
                                   break;
                                   }
                                   finally {
                      readLock.unlock();
                  }
                  case "set": try {
                                    writeLock.lock();
                                    responseType = Database.set(r.getKey(), r.getValue());
                                     if (responseType.equals("ERROR")) {
                                         response = new ErrorResponse("ERROR", "No such key");
                                     } else {
                                         response = new Response("OK");
                                     }
                                    break;
                                  }
                                  finally {
                                    writeLock.unlock();
                                  }
                  case "delete": try {
                      writeLock.lock();
                      responseType = Database.delete(r.getKey());
                      if (responseType.equals("ERROR")) {
                          response = new ErrorResponse("ERROR", "No such key");
                      } else {
                          response = new Response("OK");
                      }
                      break;
                  } finally {
                      writeLock.unlock();
                  }
                  case "exit": response=new Response("OK");
                               try{
                                   server.close();
                               } catch(Exception e){
      
                               }
                               break;
                  default: response=null;
              }
              return response;
          }
      
          private static class ClientHandler implements Runnable {
      
              private final Socket socket;
      
              private final ServerSocket server;
      
              public ClientHandler(Socket socket,ServerSocket server) {
                  this.socket = socket;
                  this.server=server;
              }
      
              @Override
              public void run() {
                  try (DataInputStream input = new DataInputStream(socket.getInputStream());
                       DataOutputStream output = new DataOutputStream(socket.getOutputStream())) {
                      String jsonOutput = input.readUTF();
                      Request request = new Gson().fromJson(jsonOutput, Request.class);
                      Response response = handleRequest(request,server);
                      String jsonInput = new Gson().toJson(response);
                      output.writeUTF(jsonInput);
      
                  } catch (IOException e) {
      
                  }
              }
          }
      
          public static void main(String[] args){
                  ExecutorService executor=Executors.newCachedThreadPool();
                  try (ServerSocket server = new ServerSocket(port, 50, InetAddress.getByName(address))) {
                      System.out.println("Server started!");
                      while(true)
                      {
                          Socket socket = server.accept();
                          executor.submit(new ClientHandler(socket,server));
                      }
                  }
                  catch (Exception e) {
      
                  }
          }
      }
    learner_created: false
  - name: src/server/Response.java
    visible: true
    text: |+
      package server;
      
      public class Response {
          String response;
          public void setResponse(String response){
              this.response=response;
          }
          public String getResponse(){
              return  response;
          }
          public void printResponse(){
              System.out.print(response);
          }
          Response(String response){
              this.response=response;
          }
      }
    
    learner_created: false
  - name: src/server/data/db.json
    visible: true
    text: "{}"
    learner_created: false
  - name: src/client/data/testDelete.json
    visible: true
    text: "{\"type\":\"delete\",\"key\":\"name\"}"
    learner_created: false
  - name: src/client/data/testSet.json
    visible: true
    text: "{\"type\":\"set\",\"key\":\"name\",\"value\":\"Kate\"}"
    learner_created: false
  - name: src/client/data/testGet.json
    visible: true
    text: "{\"type\":\"get\",\"key\":\"name\"}"
    learner_created: false
  - name: test/JsonDatabaseTest.java
    visible: false
    text: "import com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport org.hyperskill.hstest.dynamic.DynamicTest;\n\
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;\nimport org.hyperskill.hstest.stage.StageTest;\n\
    import org.hyperskill.hstest.testcase.CheckResult;\nimport org.hyperskill.hstest.testing.TestedProgram;\n\
    import org.junit.AfterClass;\nimport org.junit.BeforeClass;\n\nimport java.io.File;\n\
    import java.io.IOException;\nimport java.lang.management.ManagementFactory;\n\
    import java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport\
    \ java.nio.file.Paths;\nimport java.nio.file.StandardCopyOption;\nimport java.util.List;\n\
    \nimport static org.hyperskill.hstest.testing.expect.Expectation.expect;\nimport\
    \ static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;\nimport\
    \ static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;\n\npublic\
    \ class JsonDatabaseTest extends StageTest<String> {\n\n    private static final\
    \ String OK_STATUS = \"OK\";\n    private static final String ERROR_STATUS = \"\
    ERROR\";\n    private static final String NO_SUCH_KEY_REASON = \"No such key\"\
    ;\n\n    private static final String WRONG_EXIT = \"The server should stop when\
    \ client sends 'exit' request\";\n\n    private static final String fileName =\
    \ \"data.json\";\n    private static final String serverFolderPath = System.getProperty(\"\
    user.dir\") + File.separator +\n        \"src\" + File.separator +\n        \"\
    server\" + File.separator +\n        \"data\";\n    private static final String\
    \ serverJsonFileName = serverFolderPath + File.separator + fileName;\n\n    private\
    \ static final String clientFolderPath = System.getProperty(\"user.dir\") + File.separator\
    \ +\n        \"src\" + File.separator +\n        \"client\" + File.separator +\n\
    \        \"data\";\n\n    private static final Gson gson = new Gson();\n\n   \
    \ private static final String setFileContent = JsonBuilder.newBuilder()\n    \
    \    .addValue(\"type\", \"set\")\n        .addValue(\"key\", \"person\")\n  \
    \      .addJsonObject(\"value\", JsonBuilder.newBuilder()\n            .addValue(\"\
    name\", \"Elon Musk\")\n            .addJsonObject(\"car\",\n                JsonBuilder.newBuilder()\n\
    \                    .addValue(\"model\", \"Tesla Roadster\")\n              \
    \      .addValue(\"year\", \"2018\")\n                    .getAsJsonObject()\n\
    \            )\n            .addJsonObject(\"rocket\",\n                JsonBuilder.newBuilder()\n\
    \                    .addValue(\"name\", \"Falcon 9\")\n                    .addValue(\"\
    launches\", \"87\")\n                    .getAsJsonObject())\n            .getAsJsonObject())\n\
    \        .getAsString();\n\n    private static final String getFileContent = JsonBuilder.newBuilder()\n\
    \        .addValue(\"type\", \"get\")\n        .addValue(\"key\", gson.fromJson(\"\
    [person, name]\", JsonArray.class))\n        .getAsString();\n\n    private static\
    \ final String secondGetFileContent = JsonBuilder.newBuilder()\n        .addValue(\"\
    type\", \"get\")\n        .addValue(\"key\", gson.fromJson(\"[person]\", JsonArray.class))\n\
    \        .getAsString();\n\n    private static final String deleteFileContent\
    \ = JsonBuilder.newBuilder()\n        .addValue(\"type\", \"delete\")\n      \
    \  .addValue(\"key\", gson.fromJson(\"[person, car, year]\", JsonArray.class))\n\
    \        .getAsString();\n\n    private static final String updateFileContent\
    \ = JsonBuilder.newBuilder()\n        .addValue(\"type\", \"set\")\n        .addValue(\"\
    key\", gson.fromJson(\"[person, rocket, launches]\", JsonArray.class))\n     \
    \   .addValue(\"value\", \"88\")\n        .getAsString();\n\n    private static\
    \ int threadsCount;\n\n    @DynamicTest(order = 1)\n    CheckResult checkExit()\
    \ {\n\n        TestedProgram server = getServer();\n        server.startInBackground();\n\
    \n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException\
    \ e) {\n            e.printStackTrace();\n        }\n\n        TestedProgram client\
    \ = getClient();\n        client.start(\"-t\", \"exit\");\n\n        try {\n \
    \           Thread.sleep(100);\n        } catch (InterruptedException e) {\n \
    \           e.printStackTrace();\n        }\n\n        if (!server.isFinished())\
    \ {\n            server.stop();\n            return CheckResult.wrong(WRONG_EXIT);\n\
    \        }\n\n        return CheckResult.correct();\n    }\n\n    @DynamicTest(order\
    \ = 2)\n    CheckResult checkJsonFile() throws IOException {\n\n        if (!Files.exists(Paths.get(serverFolderPath)))\
    \ {\n            return CheckResult.wrong(\"Can't find /server/data folder\");\n\
    \        }\n\n        if (!Files.exists(Paths.get(serverJsonFileName))) {\n  \
    \          return CheckResult.wrong(\"Can't find \" + fileName + \" file in the\
    \ /server/data folder\");\n        }\n\n        if (!Files.exists(Paths.get(clientFolderPath)))\
    \ {\n            return CheckResult.wrong(\"Can't find /client/data folder\");\n\
    \        }\n\n        createJsonFiles();\n\n        return CheckResult.correct();\n\
    \    }\n\n    private static void createJsonFiles() throws IOException {\n   \
    \     Files.write(Paths.get(clientFolderPath + File.separator + \"setFile.json\"\
    ),\n            List.of(setFileContent),\n            StandardCharsets.UTF_8);\n\
    \        Files.write(Paths.get(clientFolderPath + File.separator + \"getFile.json\"\
    ),\n            List.of(getFileContent),\n            StandardCharsets.UTF_8);\n\
    \        Files.write(Paths.get(clientFolderPath + File.separator + \"secondGetFile.json\"\
    ),\n            List.of(secondGetFileContent),\n            StandardCharsets.UTF_8);\n\
    \        Files.write(Paths.get(clientFolderPath + File.separator + \"deleteFile.json\"\
    ),\n            List.of(deleteFileContent),\n            StandardCharsets.UTF_8);\n\
    \        Files.write(Paths.get(clientFolderPath + File.separator + \"updateFile.json\"\
    ),\n            List.of(updateFileContent),\n            StandardCharsets.UTF_8);\n\
    \    }\n\n    @DynamicTest(order = 3)\n    CheckResult testInputs() throws InterruptedException\
    \ {\n        \n        threadsCount = getThreadCount();\n\n        TestedProgram\
    \ server = getServer();\n        server.startInBackground();\n\n        try {\n\
    \            Thread.sleep(100);\n        } catch (InterruptedException e) {\n\
    \            e.printStackTrace();\n        }\n\n        TestedProgram client;\n\
    \        String output;\n\n        String requestJson;\n        String responseJson;\n\
    \        \n        client = getClient();\n        output = client.start(\"-t\"\
    , \"set\", \"-k\", \"1\", \"-v\", \"Hello world!\");\n        requestJson = JsonFinder.findRequestJsonObject(output);\n\
    \        expect(requestJson)\n            .asJson()\n            .check(isObject()\n\
    \                .value(\"type\", \"set\")\n                .value(\"key\", \"\
    1\")\n                .value(\"value\", \"Hello world!\")\n            );\n  \
    \      responseJson = JsonFinder.findResponseJsonObject(output);\n        expect(responseJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    response\", OK_STATUS)\n            );\n\n        // Files\n        client = getClient();\n\
    \        output = client.start(\"-in\", \"setFile.json\");\n        requestJson\
    \ = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n \
    \           .asJson()\n            .check(isObject()\n                .value(\"\
    key\", \"person\")\n                .value(\"value\", isObject()\n           \
    \         .value(\"name\", \"Elon Musk\")\n                    .value(\"car\"\
    , isObject()\n                        .value(\"model\", \"Tesla Roadster\")\n\
    \                        .anyOtherValues()\n                    )\n          \
    \          .anyOtherValues()\n                )\n                .anyOtherValues()\n\
    \            );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(isObject()\n\
    \                .value(\"response\", OK_STATUS)\n            );\n\n        client\
    \ = getClient();\n        output = client.start(\"-in\", \"getFile.json\");\n\
    \        requestJson = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"get\")\n                .value(\"key\", isArray(\"person\", \"name\"\
    ))\n            );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(\n  \
    \              isObject()\n                    .value(\"response\", OK_STATUS)\n\
    \                    .value(\"value\", \"Elon Musk\")\n            );\n\n\n  \
    \      client = getClient();\n        output = client.start(\"-in\", \"updateFile.json\"\
    );\n        requestJson = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"set\")\n                .value(\"key\", isArray(\"person\", \"rocket\"\
    , \"launches\"))\n                .value(\"value\", \"88\")\n            );\n\
    \        responseJson = JsonFinder.findResponseJsonObject(output);\n        expect(responseJson)\n\
    \            .asJson()\n            .check(\n                isObject()\n    \
    \                .value(\"response\", OK_STATUS)\n            );\n\n\n       \
    \ client = getClient();\n        output = client.start(\"-in\", \"secondGetFile.json\"\
    );\n        requestJson = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"get\")\n                .value(\"key\", isArray(\"person\"))\n     \
    \       );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(\n  \
    \              isObject()\n                    .value(\"response\", OK_STATUS)\n\
    \                    .value(\"value\", isObject()\n                        .value(\"\
    rocket\", isObject()\n                            .value(\"name\", \"Falcon 9\"\
    )\n                            .value(\"launches\", \"88\")\n                \
    \        )\n                        .anyOtherValues()\n                    )\n\
    \            );\n\n\n        client = getClient();\n        output = client.start(\"\
    -in\", \"deleteFile.json\");\n        requestJson = JsonFinder.findRequestJsonObject(output);\n\
    \        expect(requestJson)\n            .asJson()\n            .check(isObject()\n\
    \                .value(\"type\", \"delete\")\n                .value(\"key\"\
    , isArray(\"person\", \"car\", \"year\"))\n            );\n        responseJson\
    \ = JsonFinder.findResponseJsonObject(output);\n        expect(responseJson)\n\
    \            .asJson()\n            .check(\n                isObject()\n    \
    \                .value(\"response\", OK_STATUS)\n            );\n\n\n       \
    \ client = getClient();\n        output = client.start(\"-in\", \"secondGetFile.json\"\
    );\n        requestJson = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"get\")\n                .value(\"key\", isArray(\"person\"))\n     \
    \       );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(\n  \
    \              isObject()\n                    .value(\"response\", OK_STATUS)\n\
    \                    .value(\"value\", isObject()\n                        .value(\"\
    rocket\", isObject()\n                            .value(\"name\", \"Falcon 9\"\
    )\n                            .value(\"launches\", \"88\")\n                \
    \        )\n                        .value(\"car\", isObject()\n             \
    \               .value(\"model\", \"Tesla Roadster\")\n                      \
    \  )\n                        .anyOtherValues()\n                    )\n     \
    \       );\n        checkIfThreadWasCreated();\n\n\n        client = getClient();\n\
    \        client.start(\"-t\", \"exit\");\n\n        return CheckResult.correct();\n\
    \    }\n\n    private static TestedProgram getClient() {\n        return new TestedProgram(\"\
    client\");\n    }\n\n    private static TestedProgram getServer() {\n        return\
    \ new TestedProgram(\"server\");\n    }\n\n    private static int getThreadCount()\
    \ {\n        return (int) ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();\n\
    \    }\n\n    private static void checkIfThreadWasCreated() {\n\n        int total\
    \ = getThreadCount();\n\n        /*8 threads: 1 server thread and 7 client threads\
    \ created during the test.\n         If the server doesn't handle clients in a\
    \ new thread then the difference between number of threads\n         before and\
    \ after the test should be equal 8 */\n        if (total - threadsCount == 8)\
    \ {\n            throw new WrongAnswer(\"Looks like you don't process client connection\
    \ in another thread.\\n\" +\n                \"Every client request should be\
    \ parsed and handled in a separate thread!\\n\" +\n                (total - threadsCount));\n\
    \        }\n    }\n\n    @AfterClass\n    public static void deleteFiles() {\n\
    \        try {\n            Files.delete(Paths.get(clientFolderPath + File.separator\
    \ + \"setFile.json\"));\n            Files.delete(Paths.get(clientFolderPath +\
    \ File.separator + \"getFile.json\"));\n            Files.delete(Paths.get(clientFolderPath\
    \ + File.separator + \"secondGetFile.json\"));\n            Files.delete(Paths.get(clientFolderPath\
    \ + File.separator + \"deleteFile.json\"));\n            Files.delete(Paths.get(clientFolderPath\
    \ + File.separator + \"updateFile.json\"));\n        } catch (IOException ignored)\
    \ {\n        }\n\n        String filePath = serverFolderPath + File.separator\
    \ + fileName;\n        String tempFilePath = serverFolderPath + File.separator\
    \ + \"temp.json\";\n\n        try {\n            Files.copy(Paths.get(tempFilePath),\
    \ Paths.get(filePath), StandardCopyOption.REPLACE_EXISTING);\n            Files.delete(Paths.get(tempFilePath));\n\
    \        } catch (IOException ignored) {\n        }\n    }\n\n    @BeforeClass\n\
    \    public static void copyFiles() {\n\n        String filePath = serverFolderPath\
    \ + File.separator + fileName;\n        String tempFilePath = serverFolderPath\
    \ + File.separator + \"temp.json\";\n\n        try {\n            Files.createFile(Paths.get(tempFilePath));\n\
    \        } catch (IOException ignored) {\n        }\n\n        try {\n       \
    \     Files.copy(Paths.get(filePath), Paths.get(tempFilePath), StandardCopyOption.REPLACE_EXISTING);\n\
    \        } catch (IOException ignored) {\n        }\n\n        try {\n       \
    \     Files.write(Paths.get(filePath), \"{}\".getBytes());\n        } catch (IOException\
    \ ignored) {\n        }\n    }\n}\n"
    learner_created: false
  - name: test/JsonFinder.java
    visible: false
    text: |
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      
      import java.util.regex.Matcher;
      import java.util.regex.Pattern;
      
      public class JsonFinder {
      
          private static final Pattern pattern = Pattern.compile("\\{.+}");
      
          public static String findRequestJsonObject(String output) {
      
              Matcher matcher = pattern.matcher(output);
      
              while (matcher.find()) {
                  String json = matcher.group();
                  if (json.contains("type")) {
                      return json;
                  }
              }
      
              throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                  "It should contain 'type' key");
          }
      
          public static String findResponseJsonObject(String output) {
      
              Matcher matcher = pattern.matcher(output);
      
              while (matcher.find()) {
                  String json = matcher.group();
                  if (json.contains("response")) {
                      return json;
                  }
              }
      
              throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                  "It should contain 'response' key");
          }
      }
    learner_created: false
  - name: test/JsonRequestBuilder.java
    visible: false
    text: |-
      import com.google.gson.Gson;
      import com.google.gson.JsonElement;
      import com.google.gson.JsonObject;
      
      class JsonBuilder {
      
          private final Gson gson = new Gson();
          private final JsonObject jsonObject = new JsonObject();
      
          private JsonBuilder() {
      
          }
      
          public static JsonBuilder newBuilder() {
              return new JsonBuilder();
          }
      
          public JsonBuilder addValue(String key, String value) {
              jsonObject.addProperty(key, value);
              return this;
          }
      
          public JsonBuilder addValue(String key, JsonElement value) {
              jsonObject.add(key, value);
              return this;
          }
      
          public JsonBuilder addJsonObject(String key, JsonObject object) {
              jsonObject.add(key, object);
              return this;
          }
      
          public String getAsString() {
              return jsonObject.toString();
          }
      
          public JsonObject getAsJsonObject() {
              return jsonObject;
          }
      }
    learner_created: false
  - name: src/server/Request.java
    visible: true
    text: |
      package server;
      
      public class Request {
      
          private String type;
          private String key;
          private String value;
      
          public Request(String type, String key, String value) {
              this.type = type;
              this.key = key;
              this.value = value;
          }
      
          public Request(){}
      
          public String getType() {
              return type;
          }
      
          public void setType(String type) {
              this.type = type;
          }
      
          public String getKey() {
              return key;
          }
      
          public void setKey(String key) {
              this.key = key;
          }
      
          public String getValue() {
              return value;
          }
      
          public void setValue(String value) {
              this.value = value;
          }
      }
    learner_created: true
  - name: src/server/converter/JsonConverter/JsonElementConverter.java
    visible: true
    learner_created: true
  - name: src/server/data/data.json
    visible: true
    learner_created: true
  - name: src/client/setFile.json
    visible: true
    learner_created: true
  - name: src/client/updateFile.json
    visible: true
    learner_created: true
  - name: src/client/getFile.json
    visible: true
    learner_created: true
  - name: src/client/secondGetFile.json
    visible: true
    learner_created: true
  - name: src/client/deleteFile.json
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/5495#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Mon, 18 Mar 2024 17:50:46 UTC"
record: 6
