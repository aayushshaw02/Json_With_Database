type: edu
files:
  - name: src/client/Main.java
    visible: true
    text: |
      package client;
      
      import com.google.gson.Gson;
      import server.Response;
      
      import java.io.*;
      import java.net.*;
      import com.beust.jcommander.JCommander;
      import com.beust.jcommander.Parameter;
      
      public class Main {
          private static final String address="127.0.0.1";
          private static final int port=23456;
      
          @Parameter(names = {"-t", "--type"}, description = "Type of request (set, get, delete, exit)")
          private String type;
      
          @Parameter(names = {"-i", "--index"}, description = "Index of the cell")
          private String index;
      
          @Parameter(names = {"-m", "--message"}, description = "Message to store in the cell (only for set)")
          private String message;
      
          public static void main(String[] args) {
              Main main=new Main();
              JCommander.newBuilder()
                      .addObject(main)
                      .build()
                      .parse(args);
              Request request=new Request();
              request.setType(main.type);
              request.setKey(main.index);
              request.setValue(main.message);
              if(request==null)
                  return;
              try (Socket socket = new Socket(InetAddress.getByName(address), port);
                       DataInputStream input = new DataInputStream(socket.getInputStream());
                       DataOutputStream output = new DataOutputStream(socket.getOutputStream()))
              {
                      System.out.println("Client started!");
                      String jsonInput = new Gson().toJson(request);
                      output.writeUTF(jsonInput);
                      System.out.print("Sent: ");
                      System.out.println(jsonInput);
                      String jsonOutput = input.readUTF();
                      Response response = new Gson().fromJson(jsonOutput, Response.class);
                      System.out.print("Received: ");
                      System.out.println(jsonOutput);
              }catch (Exception e) {
      
              }
          }
      }
    learner_created: false
  - name: src/server/Main.java
    visible: true
    text: |
      package server;
      
      
      import client.Request;
      import com.google.gson.Gson;
      
      import java.io.DataInputStream;
      import java.io.DataOutputStream;
      import java.io.IOException;
      import java.net.InetAddress;
      import java.net.ServerSocket;
      import java.net.Socket;
      
      import static java.lang.System.exit;
      
      public class Main {
          private static final String address = "127.0.0.1";
          private static final int port = 23456;
          public static Response handleRequest(Request r,ServerSocket server){
              Response response=new Response();
              switch(r.getType()){
                  case "get": response.setResponse(Database.get(Integer.parseInt(r.getKey())));
                              break;
                  case "set": response.setResponse(Database.set(Integer.parseInt(r.getKey()),r.getValue()));
                              break;
                  case "delete": response.setResponse(Database.delete(Integer.parseInt(r.getKey())));
                                 break;
                  case "exit": try{
                                server.close();
                               }
                               catch (Exception e){
                                   System.out.println(e.getMessage());
                               }
              }
              return response;
          }
          public static void main(String[] args){
                  try (ServerSocket server = new ServerSocket(port, 50, InetAddress.getByName(address))) {
                      System.out.println("Server started!");
                      while(true) {
                          Socket socket = server.accept();
                          DataInputStream input = new DataInputStream(socket.getInputStream());
                          DataOutputStream output = new DataOutputStream(socket.getOutputStream());
                          String jsonOutput = input.readUTF();
                          Request request = new Gson().fromJson(jsonOutput, Request.class);
                          Response response = handleRequest(request, server);
                          String jsonInput = new Gson().toJson(response);
                          output.writeUTF(jsonInput);
                      }
                  }
                  catch (Exception e) {
      
                  }
          }
      }
    learner_created: false
  - name: test/JsonDatabaseTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
      
      public class JsonDatabaseTest extends StageTest<String> {
      
          private static final String OK_STATUS = "OK";
          private static final String ERROR_STATUS = "ERROR";
          private static final String NO_SUCH_KEY_REASON = "No such key";
          private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";
      
          @DynamicTest(order = 1)
          CheckResult checkExit() {
      
              TestedProgram server = getServer();
              server.startInBackground();
      
              try {
                  Thread.sleep(100);
              } catch (InterruptedException e) {
                  e.printStackTrace();
              }
      
              TestedProgram client = getClient();
              client.start("-t", "exit");
      
              try {
                  Thread.sleep(100);
              } catch (InterruptedException e) {
                  e.printStackTrace();
              }
      
              if (!server.isFinished()) {
                  server.stop();
                  return CheckResult.wrong(WRONG_EXIT);
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 2)
          CheckResult testInputs() {
      
              TestedProgram server = getServer();
              server.startInBackground();
      
              try {
                  Thread.sleep(100);
              } catch (InterruptedException e) {
                  e.printStackTrace();
              }
      
              TestedProgram client;
              String output;
              String expectedValue;
      
              client = getClient();
              output = client.start("-t", "get", "-k", "1");
      
              String requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "get")
                      .value("key", "1")
                  );
              String responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
      
              client = getClient();
              output = client.start("-t", "set", "-k", "1", "-v", "Hello world!");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "set")
                      .value("key", "1")
                      .value("value", "Hello world!")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                  );
      
      
              client = getClient();
              output = client.start("-t", "set", "-k", "1", "-v", "HelloWorld!");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "set")
                      .value("key", "1")
                      .value("value", "HelloWorld!")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                  );
      
      
              client = getClient();
              output = client.start("-t", "get", "-k", "1");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "get")
                      .value("key", "1")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                      .value("value", "HelloWorld!")
                  );
      
      
              client = getClient();
              output = client.start("-t", "delete", "-k", "1");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "delete")
                      .value("key", "1")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                  );
      
      
              client = getClient();
              output = client.start("-t", "delete", "-k", "1");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "delete")
                      .value("key", "1")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
      
              client = getClient();
              output = client.start("-t", "get", "-k", "1");
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "get")
                      .value("key", "1")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
      
              client = getClient();
              output = client.start("-t", "set", "-k", "text", "-v", "Some text here");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "set")
                      .value("key", "text")
                      .value("value", "Some text here")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                  );
      
      
              client = getClient();
              output = client.start("-t", "get", "-k", "text");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "get")
                      .value("key", "text")
                  );
              expectedValue = "Some text here";
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                      .value("value", expectedValue)
                  );
      
      
              client = getClient();
              output = client.start("-t", "get", "-k", "56");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "get")
                      .value("key", "56")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
      
              client = getClient();
              output = client.start("-t", "delete", "-k", "56");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "delete")
                      .value("key", "56")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
      
              client = getClient();
              output = client.start("-t", "delete", "-k", "100");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "delete")
                      .value("key", "100")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
              client = getClient();
              output = client.start("-t", "delete", "-k", "That key doesn't exist");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "delete")
                      .value("key", "That key doesn't exist")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
      
              client = getClient();
              client.start("-t", "exit");
      
              return CheckResult.correct();
          }
      
          private static TestedProgram getClient() {
              return new TestedProgram("client");
          }
      
          private static TestedProgram getServer() {
              return new TestedProgram("server");
          }
      
      }
    learner_created: false
  - name: test/JsonFinder.java
    visible: false
    text: |
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      
      import java.util.regex.Matcher;
      import java.util.regex.Pattern;
      
      public class JsonFinder {
      
          private static final Pattern pattern = Pattern.compile("\\{.+}");
      
          public static String findRequestJsonObject(String output) {
      
              Matcher matcher = pattern.matcher(output);
      
              while (matcher.find()) {
                  String json = matcher.group();
                  if (json.contains("type")) {
                      return json;
                  }
              }
      
              throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                      "It should contain 'type' key");
          }
      
          public static String findResponseJsonObject(String output) {
      
              Matcher matcher = pattern.matcher(output);
      
              while (matcher.find()) {
                  String json = matcher.group();
                  if (json.contains("response")) {
                      return json;
                  }
              }
      
              throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                      "It should contain 'response' key");
          }
      }
    learner_created: false
  - name: src/server/Request.java
    visible: true
    learner_created: true
  - name: src/server/Response.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/5493#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 18 Mar 2024 13:49:55 UTC"
record: 3
